# -*- coding: utf-8 -*-
import time
import streamlit as st
import pandas as pd
try:
    import gspread
except Exception:
    gspread = None

st.set_page_config(page_title="IT Asset Tracker (Sheets Patched)", page_icon="üßæ", layout="wide")

def get_sheet_id() -> str:
    sid = st.secrets.get("SHEET_ID")
    if not sid:
        sid = (st.secrets.get("gcp", {}) or {}).get("SHEET_ID")
    if not sid:
        sid = st.secrets.get("sheet_id")
    if not sid:
        with st.sidebar.expander("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SHEET_ID (‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ)"):
            tmp = st.text_input("SHEET_ID", value=st.session_state.get("SHEET_ID", ""))
            if st.button("‡πÉ‡∏ä‡πâ SHEET_ID ‡∏ô‡∏µ‡πâ"):
                st.session_state["SHEET_ID"] = tmp
                st.success("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SHEET_ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß")
        sid = st.session_state.get("SHEET_ID", "")
    return sid

def get_gs_client():
    if gspread is None:
        st.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á gspread (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á requirements.txt)")
        return None
    gcp = st.secrets.get("gcp", None)
    if not gcp:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö [gcp] ‡πÉ‡∏ô secrets.toml")
        return None
    try:
        gc = gspread.service_account_from_dict(dict(gcp))
        return gc
    except Exception as e:
        st.error(f"‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return None

def login_simple() -> bool:
    users = st.secrets.get("users", {})
    if not users:
        with st.sidebar:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö [users] ‡πÉ‡∏ô secrets.toml ‚Äî ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß")
        return True
    if "auth_ok" not in st.session_state: st.session_state["auth_ok"] = False
    with st.sidebar:
        st.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        u = st.text_input("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", value="admin", key="u")
        p = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", value="1234", key="p")
        if st.button("Login"):
            user_def = users.get(u, {})
            if user_def and str(user_def.get("password", "")) == p:
                st.session_state["auth_ok"] = True
                st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                time.sleep(0.5)
                st.experimental_rerun()
            else:
                st.error("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        if st.session_state["auth_ok"]:
            st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
    return st.session_state["auth_ok"]

def read_assets(gc, sheet_id: str) -> pd.DataFrame:
    try:
        sh = gc.open_by_key(sheet_id)
        ws = sh.get_worksheet(0)
        records = ws.get_all_records()
        df = pd.DataFrame(records)
        cols = ["id","asset_tag","name","category","serial_no","vendor","purchase_date",
                "warranty_expiry","status","branch","location","assigned_to","installed_date",
                "notes","last_update"]
        for c in cols:
            if c not in df.columns: df[c] = ""
        if "id" in df.columns:
            with pd.option_context("mode.chained_assignment", None):
                df["id"] = pd.to_numeric(df["id"], errors="coerce").fillna(0).astype(int)
        return df[cols]
    except Exception as e:
        st.error(f"‡∏≠‡πà‡∏≤‡∏ô Google Sheet ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return pd.DataFrame(columns=["id","asset_tag","name","category","serial_no","vendor",
                                     "purchase_date","warranty_expiry","status","branch","location",
                                     "assigned_to","installed_date","notes","last_update"])

def write_assets(gc, sheet_id: str, df: pd.DataFrame) -> bool:
    try:
        sh = gc.open_by_key(sheet_id)
        ws = sh.get_worksheet(0)
        ws.clear()
        ws.update([df.columns.tolist()] + df.values.tolist())
        return True
    except Exception as e:
        st.error(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Sheet ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return False

st.title("üíª IT Asset Tracker (Google Sheets + Login) ‚Äî Patched")

with st.sidebar.expander("Debug: ‡∏î‡∏π‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô secrets"):
    try:
        st.write("Top-level keys:", list(st.secrets.keys()))
        st.write("gcp keys:", list((st.secrets.get("gcp", {}) or {}).keys()))
    except Exception:
        st.write("st.secrets ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î local")

auth_ok = login_simple()
SHEET_ID = get_sheet_id()
if not SHEET_ID: st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SHEET_ID")
else: st.info(f"SHEET_ID: `{SHEET_ID}`")

if not auth_ok: st.stop()
gc = get_gs_client() if SHEET_ID else None
if SHEET_ID and gc: df = read_assets(gc, SHEET_ID)
else:
    df = pd.DataFrame(columns=["id","asset_tag","name","category","serial_no","vendor",
                               "purchase_date","warranty_expiry","status","branch","location",
                               "assigned_to","installed_date","notes","last_update"])

c1, c2, c3 = st.columns(3)
with c1: st.metric("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(df))
with c2: st.metric("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", int((df["status"]=="in_stock").sum()) if "status" in df else 0)
with c3: st.metric("‡∏ã‡πà‡∏≠‡∏°/‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô", int((df["status"]=="repair").sum()) if "status" in df else 0)
st.divider()
st.subheader("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô")
st.dataframe(df, use_container_width=True)
st.divider()
with st.expander("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏ä‡∏µ‡∏ï)"):
    sample = {
        "id": int(df["id"].max()+1 if "id" in df and len(df) else 1),
        "asset_tag": "IT-TESTSWC001-0001","name":"‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö","category":"Other",
        "serial_no":"SN123456","vendor":"vendor-x","purchase_date": time.strftime("%Y-%m-%d"),
        "warranty_expiry":"","status":"in_stock","branch":"SWC001","location":"‡∏Ñ‡∏•‡∏±‡∏á",
        "assigned_to":"","installed_date":"","notes":"‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
        "last_update": time.strftime("%Y-%m-%d %H:%M:%S")
    }
    st.write(sample)
    if st.button("‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"):
        if SHEET_ID and gc:
            new_df = pd.concat([df, pd.DataFrame([sample])], ignore_index=True)
            ok = write_assets(gc, SHEET_ID, new_df)
            if ok: st.success("‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ä‡∏µ‡∏ï‡πÅ‡∏•‡πâ‡∏ß!")
        else: st.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets")
