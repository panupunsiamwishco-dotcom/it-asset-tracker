
# -*- coding: utf-8 -*-
"""
IT Asset Tracker ‚Äî Google Sheets + Login + Thai PDF Labels (fpdf2 patched)

‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
- Login ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô st.secrets [users]
- ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheets (‡∏ú‡πà‡∏≤‡∏ô Service Account ‡πÉ‡∏ô st.secrets["gcp"] ‡πÅ‡∏•‡∏∞ SHEET_ID)
- ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡∏•‡∏ö ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
- ‡∏™‡∏£‡πâ‡∏≤‡∏á Asset Tag ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: <‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤(‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 3 ‡∏´‡∏•‡∏±‡∏Å)><‡∏õ‡∏µ‡πÅ‡∏ö‡∏ö yy><‡πÄ‡∏•‡∏Ç‡∏£‡∏±‡∏ô‡∏ô‡∏¥‡πà‡∏á N ‡∏´‡∏•‡∏±‡∏Å>
- ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ó‡πá‡∏Å (PDF ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå fonts/)
- ‡∏ä‡πà‡∏≠‡∏á Scan ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î/QR ‡πÅ‡∏ö‡∏ö HID)

‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ secrets.toml ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
[users.admin]
password = "1234"

[gcp]
type = "service_account"
project_id = "..."
private_key_id = "..."
private_key = "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"
client_email = "...@....iam.gserviceaccount.com"
token_uri = "https://oauth2.googleapis.com/token"

SHEET_ID = "‡πÉ‡∏™‡πà‡πÑ‡∏≠‡∏î‡∏µ‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏ä‡∏µ‡∏ï"

‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ worksheet 2 ‡πÅ‡∏ó‡πá‡∏ö: assets, asset_history (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á)
"""
from __future__ import annotations

import re
from io import BytesIO
from pathlib import Path
from datetime import datetime
from typing import Optional, Tuple

import streamlit as st
import pandas as pd
from fpdf import FPDF
import qrcode

# ---------- Google Sheets (optional but recommended) ----------
def get_gs_client():
    try:
        from google.oauth2.service_account import Credentials
        import gspread
    except Exception:
        return None, None
    gcp = st.secrets.get("gcp", None)
    sheet_id = st.secrets.get("SHEET_ID", None)
    if not gcp or not isinstance(gcp, dict) or not sheet_id:
        return None, None
    try:
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = Credentials.from_service_account_info(gcp, scopes=scopes)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(sheet_id)
        return gc, sh
    except Exception as e:
        st.sidebar.error(f"Google Sheets error: {e}")
        return None, None

ASSET_COLS = [
    "id","asset_tag","name","category","serial_no","vendor","purchase_date",
    "warranty_expiry","status","branch","location","assigned_to",
    "installed_date","notes","last_update"
]
HIS_COLS = ["ts","user","action","asset_tag","branch","note"]

def ensure_worksheets(sh):
    try:
        ws_assets = next((w for w in sh.worksheets() if w.title=="assets"), None)
        if ws_assets is None:
            ws_assets = sh.add_worksheet("assets", rows=2, cols=len(ASSET_COLS))
            ws_assets.update("A1", [ASSET_COLS])
        else:
            # make sure headers exist
            headers = ws_assets.row_values(1) or []
            if headers != ASSET_COLS:
                ws_assets.clear()
                ws_assets.update("A1", [ASSET_COLS])
        ws_his = next((w for w in sh.worksheets() if w.title=="asset_history"), None)
        if ws_his is None:
            ws_his = sh.add_worksheet("asset_history", rows=2, cols=len(HIS_COLS))
            ws_his.update("A1", [HIS_COLS])
    except Exception as e:
        st.error(f"‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö worksheet ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

def load_assets_df(sh) -> pd.DataFrame:
    try:
        ws = sh.worksheet("assets")
        rows = ws.get_all_records()
        df = pd.DataFrame(rows)
        if df.empty:
            return pd.DataFrame(columns=ASSET_COLS)
        # ensure all columns
        for c in ASSET_COLS:
            if c not in df.columns:
                df[c] = ""
        return df[ASSET_COLS].copy()
    except Exception:
        return pd.DataFrame(columns=ASSET_COLS)

def save_assets_df(sh, df: pd.DataFrame):
    ws = sh.worksheet("assets")
    if df.empty:
        ws.clear()
        ws.update("A1", [ASSET_COLS])
        return
    ws.clear()
    ws.update("A1", [ASSET_COLS])
    ws.update(f"A2", df[ASSET_COLS].astype(str).values.tolist())

def append_history(sh, user:str, action:str, asset_tag:str, branch:str, note:str=""):
    try:
        ws = sh.worksheet("asset_history")
        ws.append_row([datetime.now().isoformat(timespec="seconds"), user, action, asset_tag, branch, note], table_range="A1")
    except Exception:
        pass

# ---------- Simple Auth ----------
def ensure_login() -> str:
    st.sidebar.header("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    users = st.secrets.get("users", {})
    if not users:
        st.sidebar.info("""‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô `secrets.toml ‚Üí [users]`
‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: `[users.<username>] password="..."`""")
        return "admin-demo"
    if "auth_user" in st.session_state and st.session_state.auth_user:
        user = st.session_state.auth_user
        st.sidebar.success(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user}")
        if st.sidebar.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
            st.session_state.auth_user = None
        return user
    u = st.sidebar.text_input("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    p = st.sidebar.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    if st.sidebar.button("Login", use_container_width=True):
        if u in users and str(users[u].get("password","")) == str(p):
            st.session_state.auth_user = u
            st.sidebar.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return u
        else:
            st.sidebar.error("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    return ""

# ---------- Asset Tag generator ----------
def gen_asset_tag(branch_code:str, df_existing:pd.DataFrame, run_digits:int=5, year_mode:str="yy") -> str:
    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å branch_code
    digits = re.sub(r"\D", "", str(branch_code))[:3].rjust(3,"0")
    yy = datetime.now().strftime("%y") if year_mode=="yy" else (datetime.now().strftime("%Y") if year_mode=="yyyy" else "")
    # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏£‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ prefix ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    prefix = f"{digits}{yy}"
    if "asset_tag" in df_existing.columns and not df_existing.empty:
        same = df_existing["asset_tag"].astype(str).str.startswith(prefix)
        if same.any():
            last_run = (
                df_existing.loc[same, "asset_tag"]
                .astype(str)
                .str.replace(prefix, "", regex=False)
                .str.replace(r"\D", "", regex=True)
                .replace("", "0")
                .astype(int)
                .max()
            )
        else:
            last_run = 0
    else:
        last_run = 0
    nxt = str(last_run + 1).rjust(run_digits, "0")
    return f"{prefix}{nxt}"

# ---------- PDF (Thai labels) with patched fpdf2 image() ----------
FONT_CANDIDATES = [
    Path("fonts/NotoSansThai-Regular.ttf"),
    Path("NotoSansThai-Regular.ttf"),
    Path("fonts/THSarabunNew.ttf"),
    Path("THSarabunNew.ttf"),
]

def _thai_font(pdf:FPDF, size:int=10):
    ttf = next((p for p in FONT_CANDIDATES if p.exists()), None)
    if ttf is None:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô fonts/NotoSansThai-Regular.ttf) ‚Üí ‡∏à‡∏∞‡πÉ‡∏ä‡πâ Helvetica (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á)")
        pdf.set_font("Helvetica", size=size)
        return
    pdf.add_font("TH", "", str(ttf), uni=True)
    pdf.set_font("TH", size=size)

def _qr_png_bytes(data:str, box_size:int=3, border:int=1) -> BytesIO:
    q = qrcode.QRCode(box_size=box_size, border=border)
    q.add_data(str(data))
    q.make(fit=True)
    img = q.make_image(fill_color="black", back_color="white")
    bio = BytesIO()
    img.save(bio, format="PNG")
    bio.seek(0)
    return bio

def build_labels_pdf_fpdf(df:pd.DataFrame, label_w_mm:float=62, label_h_mm:float=29, cols:int=3, rows_per_page:int=8, margin_mm:float=5) -> bytes:
    pdf = FPDF(orientation="P", unit="mm", format="A4")
    pdf.set_auto_page_break(False)
    pdf.add_page()
    _thai_font(pdf, size=10)

    col_w, row_h = label_w_mm, label_h_mm
    x0, y0 = margin_mm, margin_mm

    i = 0
    for _, r in df.iterrows():
        col = i % cols
        row = (i // cols) % rows_per_page
        if i > 0 and row == 0 and col == 0:
            pdf.add_page()
        x = x0 + col*col_w
        y = y0 + row*row_h

        tag = str(r.get("asset_tag",""))
        name = str(r.get("name",""))
        branch = str(r.get("branch",""))

        # ‡∏Å‡∏£‡∏≠‡∏ö
        pdf.set_draw_color(170,170,170)
        pdf.rect(x, y, col_w, row_h)

        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        pdf.set_xy(x+2, y+3)
        pdf.multi_cell(col_w-24, 5, f"{tag}\n{name}\n{branch}", 0)

        # QR (patched: ‡∏™‡πà‡∏á BytesIO ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ stream=)
        qr_bytes = _qr_png_bytes(tag or name, box_size=3, border=0)
        qr_size = min(22, row_h-6)
        qr_x = x + col_w - (qr_size + 2)
        qr_y = y + (row_h - qr_size)/2
        pdf.image(qr_bytes, x=qr_x, y=qr_y, w=qr_size, h=qr_size, type="PNG")

        i += 1

    return pdf.output(dest="S").encode("latin-1")

# ---------- UI ----------
st.set_page_config(page_title="IT Asset Tracker (Sheets + Thai PDF)", layout="wide")
st.title("üíª IT Asset Tracker (Google Sheets + Login + Mobile Scan + Thai PDF)")

user = ensure_login()
if not user:
    st.stop()

gc, sh = get_gs_client()
if sh:
    ensure_worksheets(sh)
    st.sidebar.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÅ‡∏•‡πâ‡∏ß")
else:
    st.sidebar.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‚Äî ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

if "local_df" not in st.session_state:
    st.session_state.local_df = pd.DataFrame(columns=ASSET_COLS)

menu = st.sidebar.radio("‡πÄ‡∏°‡∏ô‡∏π", [
    "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î","‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï","‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ó‡πá‡∏Å (PDF ‡πÑ‡∏ó‡∏¢)","‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á","‡∏™‡πÅ‡∏Å‡∏ô (‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î)",
])

# ----- Dashboard -----
if menu == "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î":
    df = load_assets_df(sh) if sh else st.session_state.local_df
    c1,c2,c3,c4 = st.columns(4)
    total = len(df)
    installed = (df["status"].astype(str).str.contains("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")).sum() if not df.empty else 0
    in_stock = (df["status"].astype(str).str.contains("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ")).sum() if not df.empty else 0
    changed = (df["status"].astype(str).str.contains("‡∏ã‡πà‡∏≠‡∏°|‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô")).sum() if not df.empty else 0
    c1.metric("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total); c2.metric("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß", installed); c3.metric("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", in_stock); c4.metric("‡∏ã‡πà‡∏≠‡∏°/‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô", changed)
    st.dataframe(df, use_container_width=True)

# ----- Add / Edit -----
elif menu == "‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå":
    df = load_assets_df(sh) if sh else st.session_state.local_df
    st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")

    col = st.columns(3)
    name = col[0].text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
    branch = col[1].text_input("‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô SWC001)")
    category = col[2].text_input("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
    serial_no = st.text_input("Serial No.")
    vendor = st.text_input("Vendor")
    purchase_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠", value=None, format="YYYY-MM-DD")
    warranty_expiry = st.date_input("‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô", value=None, format="YYYY-MM-DD")
    status = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô","‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß","‡∏ã‡πà‡∏≠‡∏°/‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"])
    location = st.text_input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á/‡πÄ‡∏Å‡πá‡∏ö")
    assigned_to = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö/‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    installed_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á", value=None, format="YYYY-MM-DD")
    notes = st.text_area("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏")
    auto = st.checkbox("‡∏™‡∏£‡πâ‡∏≤‡∏á Asset Tag ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤)", value=True)
    run_digits = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏£‡∏±‡∏ô", 3, 8, 5)
    year_mode = st.selectbox("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏õ‡∏µ‡πÉ‡∏ô‡∏£‡∏´‡∏±‡∏™", ["yy","yyyy","‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà"])

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î tag
    if auto:
        tag = gen_asset_tag(branch, df, run_digits, year_mode if year_mode!="‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà" else "")
        st.text_input("Asset Tag (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)", tag, disabled=True)
    else:
        tag = st.text_input("Asset Tag (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á)")

    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÄ‡∏û‡∏¥‡πà‡∏°"):
        new_row = {
            "id": str(datetime.now().timestamp()).split(".")[0],
            "asset_tag": tag,
            "name": name,
            "category": category,
            "serial_no": serial_no,
            "vendor": vendor,
            "purchase_date": str(purchase_date) if purchase_date else "",
            "warranty_expiry": str(warranty_expiry) if warranty_expiry else "",
            "status": status,
            "branch": branch,
            "location": location,
            "assigned_to": assigned_to,
            "installed_date": str(installed_date) if installed_date else "",
            "notes": notes,
            "last_update": datetime.now().isoformat(timespec="seconds"),
        }
        if sh:
            df = load_assets_df(sh)
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            save_assets_df(sh, df)
            append_history(sh, user, "ADD", tag, branch, name)
        else:
            st.session_state.local_df = pd.concat([st.session_state.local_df, pd.DataFrame([new_row])], ignore_index=True)
        st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å {tag} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ----- Search + Update -----
elif menu == "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï":
    df = load_assets_df(sh) if sh else st.session_state.local_df
    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (asset_tag / name / branch)")
    if q:
        m = df.apply(lambda r: q.lower() in str(r["asset_tag"]).lower() or q.lower() in str(r["name"]).lower() or q.lower() in str(r["branch"]).lower(), axis=1)
        sdf = df[m].copy()
    else:
        sdf = df.copy()
    st.dataframe(sdf, use_container_width=True)
    st.caption("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö")
    if not sdf.empty:
        idx = st.number_input("‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß (index) ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ/‡∏•‡∏ö", 0, len(sdf)-1, 0)
        row = sdf.iloc[int(idx)].to_dict()
        st.write(row)
        c1,c2 = st.columns(2)
        if c1.button("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ"):
            df = df[df["asset_tag"] != row["asset_tag"]].copy()
            if sh: save_assets_df(sh, df); append_history(sh, user, "DEL", row["asset_tag"], row["branch"], row.get("name",""))
            else: st.session_state.local_df = df
            st.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
        if c2.button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤ last_update"):
            df.loc[df["asset_tag"]==row["asset_tag"], "last_update"] = datetime.now().isoformat(timespec="seconds")
            if sh: save_assets_df(sh, df); append_history(sh, user, "UPDATE", row["asset_tag"], row["branch"], "touch")
            else: st.session_state.local_df = df
            st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß")

# ----- PDF labels -----
elif menu == "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ó‡πá‡∏Å (PDF ‡πÑ‡∏ó‡∏¢)":
    df = load_assets_df(sh) if sh else st.session_state.local_df
    st.info("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á PDF")
    if not df.empty:
        chosen = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å asset_tag", df["asset_tag"].tolist())
        subset = df[df["asset_tag"].isin(chosen)] if chosen else df.head(24)
        c = st.columns(4)
        w = c[0].number_input("‡∏Å‡∏ß‡πâ‡∏≤‡∏á (‡∏°‡∏°.)", 40, 100, 62)
        h = c[1].number_input("‡∏™‡∏π‡∏á (‡∏°‡∏°.)", 15, 60, 29)
        cols = c[2].number_input("‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå/‡∏´‡∏ô‡πâ‡∏≤", 1, 6, 3)
        rows = c[3].number_input("‡πÅ‡∏ñ‡∏ß/‡∏´‡∏ô‡πâ‡∏≤", 1, 12, 8)
        if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á PDF", type="primary"):
            pdf_bytes = build_labels_pdf_fpdf(subset, w, h, int(cols), int(rows))
            st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF", data=pdf_bytes, file_name="asset_labels_thai.pdf", mime="application/pdf")
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ----- History -----
elif menu == "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á":
    if sh:
        try:
            ws = sh.worksheet("asset_history")
            rows = ws.get_all_records()
            hist = pd.DataFrame(rows)
        except Exception:
            hist = pd.DataFrame(columns=HIS_COLS)
        st.dataframe(hist, use_container_width=True)
    else:
        st.info("‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets")

# ----- Scan (keyboard) -----
elif menu == "‡∏™‡πÅ‡∏Å‡∏ô (‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î)":
    st.info("‡∏ô‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î/QR (‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î) ‡∏°‡∏≤‡∏à‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏¥‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
    code = st.text_input("Scan / ‡∏û‡∏¥‡∏°‡∏û‡πå Asset Tag ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter")
    if code:
        df = load_assets_df(sh) if sh else st.session_state.local_df
        found = df[df["asset_tag"].astype(str)==str(code)]
        if found.empty:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ")
        else:
            st.success("‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
            st.dataframe(found, use_container_width=True)

